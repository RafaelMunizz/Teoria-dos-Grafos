import unittest
from meu_grafo_matriz_adjacencia_nao_dir import *
from bibgrafo.grafo_exceptions import *

class TestGrafo(unittest.TestCase):

    def setUp(self):

        # Grafo da Para√≠ba sem arestas paralelas
        self.g_p_sem_paralelas = MeuGrafo(['J', 'C', 'E', 'P', 'M', 'T', 'Z'])
        self.g_p_sem_paralelas.adicionaAresta('a1', 'J', 'C', 2)
        self.g_p_sem_paralelas.adicionaAresta('a2', 'C', 'E', 3)
        self.g_p_sem_paralelas.adicionaAresta('a3', 'P', 'C', 4)
        self.g_p_sem_paralelas.adicionaAresta('a4', 'T', 'C', 2)
        self.g_p_sem_paralelas.adicionaAresta('a5', 'M', 'C', 4)
        self.g_p_sem_paralelas.adicionaAresta('a6', 'M', 'T', 5)
        self.g_p_sem_paralelas.adicionaAresta('a7', 'T', 'Z', 3)

        self.grafoPrim1 = MeuGrafo(['A', 'B', 'C', 'D', 'E', 'F', 'G'])
        self.grafoPrim1.adicionaAresta('a1', 'A', 'B', 2)
        self.grafoPrim1.adicionaAresta('a2', 'A', 'C', 1)
        self.grafoPrim1.adicionaAresta('a3', 'A', 'E', 3)
        self.grafoPrim1.adicionaAresta('a4', 'A', 'D', 2)
        self.grafoPrim1.adicionaAresta('a5', 'C', 'D', 1)
        self.grafoPrim1.adicionaAresta('a6', 'C', 'D', 3)
        self.grafoPrim1.adicionaAresta('a7', 'D', 'E', 5)
        self.grafoPrim1.adicionaAresta('a8', 'E', 'G', 3)
        self.grafoPrim1.adicionaAresta('a9', 'E', 'F', 5)
        self.grafoPrim1.adicionaAresta('a10', 'F', 'G', 4)

        self.g_Roteiro2 = MeuGrafo(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'])
        self.g_Roteiro2.adicionaAresta('a1', 'A', 'B', 2)
        self.g_Roteiro2.adicionaAresta('a2', 'A', 'G', 3)
        self.g_Roteiro2.adicionaAresta('a3', 'A', 'J', 6)
        self.g_Roteiro2.adicionaAresta('a4', 'K', 'G', 4)
        self.g_Roteiro2.adicionaAresta('a5', 'K', 'J', 8)
        self.g_Roteiro2.adicionaAresta('a6', 'J', 'G', 6)
        self.g_Roteiro2.adicionaAresta('a7', 'J', 'I', 4)
        self.g_Roteiro2.adicionaAresta('a8', 'G', 'I', 1)
        self.g_Roteiro2.adicionaAresta('a9', 'G', 'H', 5)
        self.g_Roteiro2.adicionaAresta('a10', 'H', 'F', 3)
        self.g_Roteiro2.adicionaAresta('a11', 'F', 'B', 2)
        self.g_Roteiro2.adicionaAresta('a12', 'B', 'G', 7)
        self.g_Roteiro2.adicionaAresta('a13', 'B', 'C', 5)
        self.g_Roteiro2.adicionaAresta('a14', 'C', 'D', 3)
        self.g_Roteiro2.adicionaAresta('a15', 'D', 'E', 4)
        self.g_Roteiro2.adicionaAresta('a16', 'D', 'B', 6)
        self.g_Roteiro2.adicionaAresta('a17', 'B', 'E', 3)

        self.grafoSimples3 = MeuGrafo(['1', '2', '3', '4', '5', '6'])
        self.grafoSimples3.adicionaAresta('a1', '1', '2', 3)
        self.grafoSimples3.adicionaAresta('a2', '1', '3', 4)
        self.grafoSimples3.adicionaAresta('a3', '1', '4', 2)
        self.grafoSimples3.adicionaAresta('a4', '1', '6', 3)
        self.grafoSimples3.adicionaAresta('a5', '3', '4', 1)
        self.grafoSimples3.adicionaAresta('a6', '3', '5', 6)
        self.grafoSimples3.adicionaAresta('a7', '4', '5', 5)
        self.grafoSimples3.adicionaAresta('a8', '2', '3', 2)
        self.grafoSimples3.adicionaAresta('a9', '2', '5', 4)
        self.grafoSimples3.adicionaAresta('a10', '5', '6', 3)
        self.grafoSimples3.adicionaAresta('a11', '4', '6', 4)
        self.grafoSimples3.adicionaAresta('a12', '2', '6', 5)

        self.grafoEuleriano2 = MeuGrafo(['A', 'B', 'C', 'D', 'E', 'F', 'G'])
        self.grafoEuleriano2.adicionaAresta('a1', 'A', 'B', 2)
        self.grafoEuleriano2.adicionaAresta('a2', 'B', 'C', 3)
        self.grafoEuleriano2.adicionaAresta('a3', 'C', 'A', 4)
        self.grafoEuleriano2.adicionaAresta('a4', 'A', 'G', 7)
        self.grafoEuleriano2.adicionaAresta('a5', 'G', 'C', 5)
        self.grafoEuleriano2.adicionaAresta('a6', 'C', 'D', 4)
        self.grafoEuleriano2.adicionaAresta('a7', 'D', 'G', 3)
        self.grafoEuleriano2.adicionaAresta('a8', 'G', 'F', 6)
        self.grafoEuleriano2.adicionaAresta('a9', 'F', 'D', 4)
        self.grafoEuleriano2.adicionaAresta('a10', 'D', 'E', 1)
        self.grafoEuleriano2.adicionaAresta('a11', 'E', 'F', 2)
        self.grafoEuleriano2.adicionaAresta('a12', 'F', 'A', 3)

        self.grafoGigante = MeuGrafo(
            ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'])
        self.grafoGigante.adicionaAresta('a1', 'A', 'B', 3)
        self.grafoGigante.adicionaAresta('a2', 'A', 'C', 4)
        self.grafoGigante.adicionaAresta('a3', 'A', 'D', 5)
        self.grafoGigante.adicionaAresta('a4', 'B', 'G', 5)
        self.grafoGigante.adicionaAresta('a5', 'B', 'F', 6)
        self.grafoGigante.adicionaAresta('a6', 'C', 'F', 3)
        self.grafoGigante.adicionaAresta('a7', 'C', 'E', 6)
        self.grafoGigante.adicionaAresta('a8', 'C', 'D', 3)
        self.grafoGigante.adicionaAresta('a9', 'D', 'E', 3)
        self.grafoGigante.adicionaAresta('a10', 'G', 'I', 2)
        self.grafoGigante.adicionaAresta('a11', 'F', 'I', 3)
        self.grafoGigante.adicionaAresta('a12', 'F', 'H', 4)
        self.grafoGigante.adicionaAresta('a13', 'E', 'H', 2)
        self.grafoGigante.adicionaAresta('a14', 'E', 'K', 6)
        self.grafoGigante.adicionaAresta('a15', 'E', 'J', 3)
        self.grafoGigante.adicionaAresta('a16', 'I', 'L', 5)
        self.grafoGigante.adicionaAresta('a17', 'H', 'L', 10)
        self.grafoGigante.adicionaAresta('a18', 'K', 'L', 3)
        self.grafoGigante.adicionaAresta('a19', 'K', 'O', 5)
        self.grafoGigante.adicionaAresta('a20', 'K', 'N', 2)
        self.grafoGigante.adicionaAresta('a21', 'J', 'N', 4)
        self.grafoGigante.adicionaAresta('a22', 'L', 'M', 6)
        self.grafoGigante.adicionaAresta('a23', 'O', 'M', 4)
        self.grafoGigante.adicionaAresta('a24', 'O', 'P', 4)
        self.grafoGigante.adicionaAresta('a25', 'N', 'P', 6)
        self.grafoGigante.adicionaAresta('a26', 'M', 'R', 5)
        self.grafoGigante.adicionaAresta('a27', 'M', 'Q', 9)
        self.grafoGigante.adicionaAresta('a28', 'Q', 'R', 3)
        self.grafoGigante.adicionaAresta('a29', 'Q', 'S', 2)
        self.grafoGigante.adicionaAresta('a30', 'Q', 'P', 3)
        self.grafoGigante.adicionaAresta('a31', 'P', 'T', 9)
        self.grafoGigante.adicionaAresta('a32', 'T', 'S', 1)

    def test_Prim(self):
             self.assertEqual(self.g_p_sem_paralelas.primAlgoritmo(), [['J-C', 2], ['C-E', 3], ['C-P', 4], ['C-M', 4], ['C-T', 2], ['T-Z', 3]])
             self.assertEqual(self.grafoPrim1.primAlgoritmo(), [['A-B', 2], ['A-C', 1], ['C-D', 1], ['A-E', 3], ['E-F', 5], ['E-G', 3]])
             self.assertEqual(self.g_Roteiro2.primAlgoritmo(), [['A-B', 2], ['B-C', 5], ['C-D', 3], ['B-E', 3], ['B-F', 2], ['A-G', 3], ['F-H', 3], ['G-I', 1], ['I-J', 4], ['G-K', 4]])
             self.assertEqual(self.grafoSimples3.primAlgoritmo(), [['1-2', 3], ['2-3', 2], ['1-4', 2], ['2-5', 4], ['1-6', 3]])
             self.assertEqual(self.grafoGigante.primAlgoritmo(), [['A-B', 3], ['A-C', 4], ['C-D', 3], ['D-E', 3], ['C-F', 3], ['B-G', 5], ['E-H', 2], ['F-I', 3], ['E-J', 3], ['E-K', 6], ['I-L', 5], ['L-M', 6], ['J-N', 4], ['K-O', 5], ['O-P', 4], ['P-Q', 3], ['Q-R', 3], ['Q-S', 2], ['S-T', 1]])
             self.assertEqual(self.grafoEuleriano2.primAlgoritmo(), [['A-B', 2], ['B-C', 3], ['C-D', 4], ['D-E', 1], ['A-F', 3], ['D-G', 3]])

    def test_Kruskal(self):
             self.assertEqual(self.g_p_sem_paralelas.kruskalAlgoritmo(), [['J-C', 2], ['C-T', 2], ['C-E', 3], ['T-Z', 3], ['C-P', 4], ['C-M', 4]])
             self.assertEqual(self.grafoPrim1.kruskalAlgoritmo(), [['A-C', 1], ['C-D', 1], ['A-B', 2], ['A-E', 3], ['E-G', 3], ['F-G', 4]])
             self.assertEqual(self.g_Roteiro2.kruskalAlgoritmo(), [['G-I', 1], ['A-B', 2], ['B-F', 2], ['A-G', 3], ['F-H', 3], ['C-D', 3], ['B-E', 3], ['G-K', 4], ['I-J', 4], ['D-E', 4]])
             self.assertEqual(self.grafoSimples3.kruskalAlgoritmo(), [['3-4', 1], ['1-4', 2], ['2-3', 2], ['1-6', 3], ['5-6', 3]])
             self.assertEqual(self.grafoGigante.kruskalAlgoritmo(), [['S-T', 1], ['G-I', 2], ['E-H', 2], ['K-N', 2], ['Q-S', 2], ['A-B', 3], ['C-F', 3], ['C-D', 3], ['D-E', 3], ['F-I', 3], ['E-J', 3], ['K-L', 3], ['Q-R', 3], ['P-Q', 3], ['A-C', 4], ['J-N', 4], ['M-O', 4], ['O-P', 4], ['K-O', 5]])
             self.assertEqual(self.grafoEuleriano2.kruskalAlgoritmo(), [['D-E', 1], ['A-B', 2], ['E-F', 2], ['B-C', 3], ['D-G', 3], ['A-F', 3]])



